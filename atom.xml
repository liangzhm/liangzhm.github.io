<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>和叶的空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/liangzhm/"/>
  <updated>2019-02-02T10:23:52.853Z</updated>
  <id>https://github.com/liangzhm/</id>
  
  <author>
    <name>liangzhm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>针对git多账号ssh-key的设置方法（github和gitlab）</title>
    <link href="https://github.com/liangzhm/2019/02/02/%E9%92%88%E5%AF%B9git%E5%A4%9A%E8%B4%A6%E5%8F%B7ssh-key%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%EF%BC%88github%E5%92%8Cgitlab%EF%BC%89/"/>
    <id>https://github.com/liangzhm/2019/02/02/针对git多账号ssh-key的设置方法（github和gitlab）/</id>
    <published>2019-02-02T09:54:36.000Z</published>
    <updated>2019-02-02T10:23:52.853Z</updated>
    
    <content type="html"><![CDATA[<p>日常使用git作为仓库使用时，会遇到以下情况，有一个github账号（私人博客的）和一个gitlab账号（公司的），提交时会遇到没有公钥权限的情况。下面详细说一下如何设置。</p><h2 id="1-清除git的全局设置"><a href="#1-清除git的全局设置" class="headerlink" title="1.清除git的全局设置"></a>1.清除git的全局设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -global --list 可查看之前对 git 设置过全局的 user.name 和 user.email</span><br></pre></td></tr></table></figure><h4 id="如果有，必须删除该设置"><a href="#如果有，必须删除该设置" class="headerlink" title="如果有，必须删除该设置"></a>如果有，必须删除该设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name &quot;你的名字&quot;</span><br><span class="line">git config --global --unset user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><h2 id="2-生成新的-SSH-keys"><a href="#2-生成新的-SSH-keys" class="headerlink" title="2.生成新的 SSH keys"></a>2.生成新的 SSH keys</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;heye@**.com&quot; 名称是gitlab_id_rsa</span><br><span class="line">ssh-keygen -t rsa -C &quot;heye@gmail.com&quot; 名称是github_id_rsa</span><br></pre></td></tr></table></figure><h2 id="3-提供公钥给服务器"><a href="#3-提供公钥给服务器" class="headerlink" title="3.提供公钥给服务器"></a>3.提供公钥给服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 复制 ~/.ssh/gitlab_id_rsa.pub文件内容，进入gitlab / profile / SSH Keys，将公钥内容添加至 gitlab 。</span><br><span class="line">2. 复制 ~/.ssh/github_id_rsa.pub文件内容，进入github / setting / SSH and GPG keys / New SSH key 将公钥内容添加至 github 。</span><br></pre></td></tr></table></figure><h2 id="4-更新SSH配置文件，用户级别的配置文件-ssh-config"><a href="#4-更新SSH配置文件，用户级别的配置文件-ssh-config" class="headerlink" title="4.更新SSH配置文件，用户级别的配置文件~/.ssh/config"></a>4.更新SSH配置文件，用户级别的配置文件~/.ssh/config</h2><p>在~/.ssh/目录执行touch config，若有，先删除。<br>打开config，输入以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#default gitLab 公司账号</span><br><span class="line">Host git.**.com</span><br><span class="line">HostName git.**.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">User heye@**.com</span><br><span class="line">IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line"></span><br><span class="line">#add gitHub 我的博客</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">User heye@gmail.com</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></p><h2 id="5-配置仓库用户信息"><a href="#5-配置仓库用户信息" class="headerlink" title="5.配置仓库用户信息"></a>5.配置仓库用户信息</h2><p>依次的加载顺序是</p><ol><li>~/.gitconfig 中的用户信息</li><li>当前项目使用的仓库的git目录中的config文件，也就是.git/config<br>因为不同仓库连接不同的服务器，所用的git用户信息也不同。<br>可以把常用的git用户信息配置到 ~/.gitconfig 中，不常用的我们在仓库中单独配置。以常用 gitlab 为例，这样就把公司账号设为了全局的默认用户信息。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;heye2&quot;</span><br><span class="line">git config --global user.email &quot;heye@**.com&quot;</span><br></pre></td></tr></table></figure></li></ol><p>进入本地 github 仓库配置 git 用户信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --local user.name &quot;heye&quot;</span><br><span class="line">git config --local user.email &quot;heye@gmail.com&quot;</span><br></pre></td></tr></table></figure></p><p>不设置这一步的话，直接到第6步也会提示进行这一步的。</p><h2 id="6-测试github和gitlab账号通了没"><a href="#6-测试github和gitlab账号通了没" class="headerlink" title="6. 测试github和gitlab账号通了没"></a>6. 测试github和gitlab账号通了没</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.**.com</span><br></pre></td></tr></table></figure><p>连续输三次密码后，再次进行测试连接。<br>显示连接已经成功。<br>在git commit 时，提示没有用户信息<br>随之设置用户信息<br>于是就可以正常的提交代码到远程仓库了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>当看到测试得到的结果是success时，说明已经正确的设置可github和gitlab的ssh key了。<br>这样博客文件也可以正常的进行pull 和push 以及hero d -g 部署和发布了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日常使用git作为仓库使用时，会遇到以下情况，有一个github账号（私人博客的）和一个gitlab账号（公司的），提交时会遇到没有公钥权限的情况。下面详细说一下如何设置。&lt;/p&gt;
&lt;h2 id=&quot;1-清除git的全局设置&quot;&gt;&lt;a href=&quot;#1-清除git的全局设置&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试博客正常否</title>
    <link href="https://github.com/liangzhm/2019/02/02/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%B8%B8%E5%90%A6/"/>
    <id>https://github.com/liangzhm/2019/02/02/测试博客正常否/</id>
    <published>2019-02-02T09:35:19.000Z</published>
    <updated>2019-02-02T09:47:26.221Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈，是正常的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;哈哈，是正常的&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019，对自己说加油</title>
    <link href="https://github.com/liangzhm/2019/02/02/2019%EF%BC%8C%E5%AF%B9%E8%87%AA%E5%B7%B1%E8%AF%B4%E5%8A%A0%E6%B2%B9/"/>
    <id>https://github.com/liangzhm/2019/02/02/2019，对自己说加油/</id>
    <published>2019-02-02T09:24:58.000Z</published>
    <updated>2019-02-02T09:47:26.216Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间，来到新的工作单位已经将近半年了，在这段时间里，学到了很多，也得到了很多，心态比以前成熟了许多。希望2019，工作能上一个台阶，也希望我身边所有人越来越好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转眼间，来到新的工作单位已经将近半年了，在这段时间里，学到了很多，也得到了很多，心态比以前成熟了许多。希望2019，工作能上一个台阶，也希望我身边所有人越来越好。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>后台系统登录鉴权步骤记录</title>
    <link href="https://github.com/liangzhm/2018/06/16/%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95%E9%89%B4%E6%9D%83%E6%AD%A5%E9%AA%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://github.com/liangzhm/2018/06/16/后台系统登录鉴权步骤记录/</id>
    <published>2018-06-16T10:04:36.000Z</published>
    <updated>2019-02-02T09:47:26.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录鉴权步骤"><a href="#登录鉴权步骤" class="headerlink" title="登录鉴权步骤"></a>登录鉴权步骤</h1><h2 id="1-路由里写鉴权"><a href="#1-路由里写鉴权" class="headerlink" title="1. 路由里写鉴权"></a>1. 路由里写鉴权</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/api/login&apos;, app.passport.authenticate(&apos;local&apos;, &#123; successRedirect: &apos;/api/login/authCallback&apos; &#125;));</span><br></pre></td></tr></table></figure><h2 id="2-config-plugin-js-同时安装egg-passport模块"><a href="#2-config-plugin-js-同时安装egg-passport模块" class="headerlink" title="2. // config/plugin.js  同时安装egg-passport模块"></a>2. // config/plugin.js  同时安装egg-passport模块</h2><p>exports.passport = {<br>  enable: true,<br>  package: ‘egg-passport’,<br>};</p><h2 id="3-app-js里导入-导入鉴权逻辑"><a href="#3-app-js里导入-导入鉴权逻辑" class="headerlink" title="3.app.js里导入 导入鉴权逻辑"></a>3.app.js里导入 导入鉴权逻辑</h2><p>module.exports = app =&gt; {<br>    require(‘./init/session’)(app)<br>    require(‘./init/passLocal’)(app)<br>};</p><h2 id="4-init-passLocal-js-里加入鉴权的逻辑"><a href="#4-init-passLocal-js-里加入鉴权的逻辑" class="headerlink" title="4.init/passLocal.js 里加入鉴权的逻辑"></a>4.init/passLocal.js 里加入鉴权的逻辑</h2><h2 id="5-init-session-js-里有model为Session的函数，所以要新建model在app文件夹下，new-Schema"><a href="#5-init-session-js-里有model为Session的函数，所以要新建model在app文件夹下，new-Schema" class="headerlink" title="5.init/session.js 里有model为Session的函数，所以要新建model在app文件夹下，new Schema({ })"></a>5.init/session.js 里有model为Session的函数，所以要新建model在app文件夹下，new Schema({ })</h2><h2 id="6-调试时发现post请求，但是url后面还是带着参数，仔细查看文档，原来是axios请求参数为data时会自动序列化为json格式的，在post-的body里，export-const-fqLogin"><a href="#6-调试时发现post请求，但是url后面还是带着参数，仔细查看文档，原来是axios请求参数为data时会自动序列化为json格式的，在post-的body里，export-const-fqLogin" class="headerlink" title="6.调试时发现post请求，但是url后面还是带着参数，仔细查看文档，原来是axios请求参数为data时会自动序列化为json格式的，在post 的body里，export const fqLogin = {"></a>6.调试时发现post请求，但是url后面还是带着参数，仔细查看文档，原来是axios请求参数为data时会自动序列化为json格式的，在post 的body里，export const fqLogin = {</h2><p>  async login(data) { // 注意: 这个地方要写data，axios会序列化为json<br>     return await http({<br>       url: ‘/myApi/api/login’,<br>       method: ‘post’,<br>       data<br>     })<br>  }<br>}</p><h2 id="7-init-passLocal-js里面。先去验证req-body里验证码和session-code-是否一致，如果一致，才往下走查找用户的逻辑"><a href="#7-init-passLocal-js里面。先去验证req-body里验证码和session-code-是否一致，如果一致，才往下走查找用户的逻辑" class="headerlink" title="7. init/passLocal.js里面。先去验证req.body里验证码和session.code 是否一致，如果一致，才往下走查找用户的逻辑"></a>7. init/passLocal.js里面。先去验证req.body里验证码和session.code 是否一致，如果一致，才往下走查找用户的逻辑</h2><h2 id="8-查找用户时，调用ctx-service-users-login-user-服务，于是，在service下面建users-js文件，里面其实就是调用数据库方法查找数据，如果找到了，那么登录成功。自此，鉴权登录逻辑完成。"><a href="#8-查找用户时，调用ctx-service-users-login-user-服务，于是，在service下面建users-js文件，里面其实就是调用数据库方法查找数据，如果找到了，那么登录成功。自此，鉴权登录逻辑完成。" class="headerlink" title="8. 查找用户时，调用ctx.service.users.login(user) 服务，于是，在service下面建users.js文件，里面其实就是调用数据库方法查找数据，如果找到了，那么登录成功。自此，鉴权登录逻辑完成。"></a>8. 查找用户时，调用ctx.service.users.login(user) 服务，于是，在service下面建users.js文件，里面其实就是调用数据库方法查找数据，如果找到了，那么登录成功。自此，鉴权登录逻辑完成。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;登录鉴权步骤&quot;&gt;&lt;a href=&quot;#登录鉴权步骤&quot; class=&quot;headerlink&quot; title=&quot;登录鉴权步骤&quot;&gt;&lt;/a&gt;登录鉴权步骤&lt;/h1&gt;&lt;h2 id=&quot;1-路由里写鉴权&quot;&gt;&lt;a href=&quot;#1-路由里写鉴权&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
</feed>
